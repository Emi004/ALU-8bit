`include "mlcla.v"
`include "srt2.v"
`include "newbooth.v"



module au (
    input[7:0]A,B,
    input clk,rst, startadd,startsub,startdiv,startmultiplier,
    output reg[15:0] result,
    output overflow,negative,zero,carry_out,
    //divisionBy0,
    output reg done
);
    wire[7:0]addsub_result,quotient,remainder;
    wire[15:0]product;
    wire mult_done,div_done;
    
    mlcla addsub(.x(A),.y(B),.start(startadd|startsub),.select(startsub),.c8(carry_out),.z(addsub_result),.overflow(overflow),.negative(negative),.zero(zero));
    newbooth multi(.multiplicand(A),.multiplier(B),.clk(clk),.rst(rst),.start(startmultiplier),.p(product),.done(mult_done));
    srt2 div(.dividend(A),.divisor(B),.clk(clk),.rst(rst),.quotient(quotient),.start(startdiv),.remainder(remainder),.done(div_done));

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            result <= 16'b0;
            done <= 0;
        end
        else begin
            done <= 0;
            
            if (startadd | startsub) begin
                result <= {{8{addsub_result[7]}}, addsub_result};
                done <= 1;
            end
            else if (startmultiplier & mult_done) begin
                result <= product;
                done <= 1;
            end
            else if (startdiv & div_done) begin
                result <= {quotient, remainder};
                done <= 1;
            end
        end
    end


endmodule




`timescale 1ns/1ps
`include "mlcla.v"
`include "srt2.v"
`include "newbooth.v"

module au_tb_checker;

    // Inputs
    reg [7:0] A, B;
    reg clk, rst;
    reg startadd, startsub, startdiv, startmultiplier;

    // Outputs
    wire [15:0] result;
    wire overflow, negative, zero, carry_out, done;

    // DUT
    au uut (
        .A(A),
        .B(B),
        .clk(clk),
        .rst(rst),
        .startadd(startadd),
        .startsub(startsub),
        .startdiv(startdiv),
        .startmultiplier(startmultiplier),
        .result(result),
        .overflow(overflow),
        .negative(negative),
        .zero(zero),
        .carry_out(carry_out),
        .done(done)
    );

    // Clock generation
    always #5 clk = ~clk;

    // === Utility tasks ===
    task start_op(input add, sub, mul, div);
        begin
            startadd = add;
            startsub = sub;
            startmultiplier = mul;
            startdiv = div;
        end
    endtask

    task check_result(
        input [15:0] expected_result,
        input exp_overflow, exp_negative, exp_zero,
        input [255:0] test_name
    );
        begin
            if (result !== expected_result ||
                overflow !== exp_overflow ||
                negative !== exp_negative ||
                zero !== exp_zero) begin
                $display("❌ %s FAILED", test_name);
                $display("   Got Result=%h | Flags: OF=%b NEG=%b ZERO=%b",
                         result, overflow, negative, zero);
                $display("   Expected Result=%h | OF=%b NEG=%b ZERO=%b",
                         expected_result, exp_overflow, exp_negative, exp_zero);
            end else begin
                $display("✅ %s PASSED", test_name);
            end
            #20;
        end
    endtask

    // === Test procedure ===
    initial begin
        clk = 0;
        rst = 1;
        A = 0;
        B = 0;
        start_op(0,0,0,0);
        #20 rst = 0;

        $dumpfile("au_checker.vcd");
        $dumpvars(0, au_tb_checker);

        // ==== ADD ====
        A = 8'd25; B = 8'd50; start_op(1,0,0,0);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result(16'd75, 0, 0, 0, "Addition 25 + 50");

        // ==== SUB ====
        A = 8'd25; B = 8'd50; start_op(0,1,0,0);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result({8'hFF, 8'd231}, 0, 1, 0, "Subtraction 25 - 50");

        // ==== SUB zero ====
        A = 8'd100; B = 8'd100; start_op(0,1,0,0);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result(16'd0, 0, 0, 1, "Subtraction 100 - 100 = 0");

        // ==== MUL ====
        A = 8'd5; B = 8'd6; start_op(0,0,1,0);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result(16'd30, 0, 0, 0, "Multiplication 5 * 6");

        // ==== MUL negative ====
        A = -8'd3; B = 8'd7; start_op(0,0,1,0);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result(-16'd21, 0, 1, 0, "Multiplication -3 * 7");

        // ==== DIV ====
        A = 8'd25; B = 8'd4; start_op(0,0,0,1);
        #10 start_op(0,0,0,0);
        wait(done);
        check_result({8'd6, 8'd1}, 0, 0, 0, "Division 25 / 4");

        // ==== DIV by 0 ====
        A = 8'd25; B = 8'd0; start_op(0,0,0,1);
        #10 start_op(0,0,0,0);
        wait(done);
        $display("⚠️  Division by zero: Quotient=%d Remainder=%d", result[15:8], result[7:0]);

        $display("\n✅ All tests completed.\n");
        $finish;
    end

endmodule
